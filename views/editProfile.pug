extends layouts/main

block content  
    .form_container
        form(action=routes.editProfile, method="post")
            label(for="avatar") Avatar
            input(type="file", id="avatar", name="avatar")
            input(type="text", placeholder="Name", name="name")
            input(type="email", placeholder="Email", name="email")
            input(type="submit", placeholder="Update Profile")
        a.form_container__link(href=/users${routes.changePassword}`) Change Password
//- https://m.blog.naver.com/PostView.nhn?blogId=imansei0&logNo=110168823349&proxyReferer=https:%2F%2Fwww.google.com%2F 
//- HTML 내에서의 접근 방식에 따른 특징은 아래와 같다.
//- 먼저 id는 하나의 페이지 안에서 이름이 유일해야하고, name은 중복될 수 있다.
//- 그러므로 화면을 구성하는 모든 것들에게 따로따로 접근할 때는 id 값을 이용하고,
//- 구성하는 모든 것 들 중에서 그룹으로 접근하고 싶을 땐 name 을 활용하는 식으로 편의성을 가질 수 있다.

//- 단순히 퍼블리싱을 할 때도 id와 name은 중요하지만,
//- 웹개발에 있어서 name의 존재는 아주 특별하다. 바로 폼 태그와 액션을 활용한 서버와 클라이언트간의 호출관계 속에서
//- 각각의 태그들을 "식별"하기 위한 앨리먼트(라고 해야하나..)가 바로 name이기 때문이다.
//- id는 jsp 페이지 안에서만 활용되지만 name은 컨트롤러로 가져가서 활용할 수 있다.
//- 해서, 폼을 서브밋해서 액션을 탔을 때 컨트롤러에서 리퀘스트.get파라미터("네임") 으로 값을 가져올 수 있는 것이다.